# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "3.0.0"
  title: GitHub API

# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /search/repositories:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Find repositories via various criteria. This method returns up to 100 results [per page]().
        
        **Parameters**
        
        'The `q` search term can also contain any combination of the supported repository search qualifiers as described by the in-browser repository search documentation and search syntax documentation:'
        - `in` Qualifies which fields are searched. With this qualifier you can restrict the search to just the repository name, description, readme, or any combination of these.
        - `size` Finds repositories that match a certain size (in kilobytes).
        - `forks` Filters repositories based on the number of forks.
        - `fork` Filters whether forked repositories should be included (true) or only forked repositories should be returned (only).
        - `created` or `pushed` Filters repositories based on date of creation, or when they were last updated.
        - `user` or `repo` Limits searches to a specific user or repository.
        - `language` Searches repositories based on the language they're written in.
        - `stars` Searches repositories based on the number of stars.
        
        **Example**
        
        Suppose you want to search for popular Tetris repositories written in Assembly. Your query might look like this.
        
        ```
        https://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc
        ```
        
        In this request, we're searching for repositories with the word `tetris` in the name, the description, or the README. We're limiting the results to only find repositories where the primary language is Assembly. We're sorting by stars in descending order, so that the most popular repositories appear first in the search results.
        
        ```
        Status: 200 OK
        Link: <https://api.github.com/resource?page=2>; rel="next",
              <https://api.github.com/resource?page=5>; rel="last"
        X-RateLimit-Limit: 20
        X-RateLimit-Remaining: 19
        {
          "total_count": 40,
          "incomplete_results": false,
          "items": [
            {
              "id": 3081286,
              "name": "Tetris",
              "full_name": "dtrupenn/Tetris",
              "owner": {
                "login": "dtrupenn",
                "id": 872147,
                "avatar_url": "https://secure.gravatar.com/avatar/e7956084e75f239de85d3a31bc172ace?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
                "gravatar_id": "",
                "url": "https://api.github.com/users/dtrupenn",
                "received_events_url": "https://api.github.com/users/dtrupenn/received_events",
                "type": "User"
              },
              "private": false,
              "html_url": "https://github.com/dtrupenn/Tetris",
              "description": "A C implementation of Tetris using Pennsim through LC4",
              "fork": false,
              "url": "https://api.github.com/repos/dtrupenn/Tetris",
              "created_at": "2012-01-01T00:31:50Z",
              "updated_at": "2013-01-05T17:58:47Z",
              "pushed_at": "2012-01-01T00:37:02Z",
              "homepage": "",
              "size": 524,
              "stargazers_count": 1,
              "watchers_count": 1,
              "language": "Assembly",
              "forks_count": 0,
              "open_issues_count": 0,
              "master_branch": "master",
              "default_branch": "master",
              "score": 10.309712
            }
          ]
        }
        ```
        
        **Highlighting Repository Search Results**
        
        Some API consumers will want to highlight the matching search terms when displaying search results. The API offers additional metadata to support this use case. To get this metadata in your search results, specify the `text-match` media type in your Accept header. For example, via curl, the above query would look like this:
        
        ```
        curl -H 'Accept: application/vnd.github.v3.text-match+json' \
          'https://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc'
        ```
        
        This produces the same JSON payload as above, with an extra key called text_matches, an array of objects. These objects provide information such as the position of your search terms within the text, as well as the property that included the search term.

        When searching for repositories, you can get text match metadata for the name and description fields. (See the section on text match metadata for full details.)

        Here's an example response:
        
        ```
        {
          "text_matches": [
            {
              "object_url": "https://api.github.com/repositories/3081286",
              "object_type": "Repository",
              "property": "name",
              "fragment": "Tetris",
              "matches": [
                {
                  "text": "Tetris",
                  "indices": [
                    0,
                    6
                  ]
                }
              ]
            },
            {
              "object_url": "https://api.github.com/repositories/3081286",
              "object_type": "Repository",
              "property": "description",
              "fragment": "A C implementation of Tetris using Pennsim through LC4",
              "matches": [
                {
                  "text": "Tetris",
                  "indices": [
                    22,
                    28
                  ]
                }
              ]
            }
          ]
        }
        ```
        
      # This is array of GET operation parameters:
      parameters:
        -
          name: q
          in: query
          description: The search keywords, as well as any qualifiers.
          required: true
          type: string
          #format: string
        -
          name: sort
          in: query
          description: 'The sort field. One of `stars`, `forks`, or `updated`. Default: results are sorted by best match.'
          required: false
          type: string
          #format: string
        -
          name: order
          in: query
          description: 'The sort order if sort parameter is provided. One of `asc` or `desc`. Default: `desc`'
          required: false
          type: string
          #format: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/Repositories'

definitions:
  Repositories:
    type: object
    properties:
      total_count:
        type: integer
      incomplete_results:
        type: boolean
      items:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            owner:
              type: object
              properties:
                login:
                  type: string
                id:
                  type: integer
                avatar_url:
                  type: string
                gravatar_id:
                  type: string
                url:
                  type: string
                received_events_url:
                  type: string
                type:
                  type: string
            private:
              type: boolean
            html_url:
              type: string
            description:
              type: string
            fork:
              type: boolean
            url:
              type: string
            created_at:
              type: string
            updated_at:
              type: string
            pushed_at:
              type: string
            homepage:
              type: string
            size:
              type: integer
            stargazers_count:
              type: integer
            watchers_count:
              type: integer
            language:
              type: string
            forks_count:
              type: integer
            open_issues_count:
              type: integer
            master_branch:
              type: string
            default_branch:
              type: string
            score:
              type: number
