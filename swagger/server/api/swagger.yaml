---
swagger: "2.0"
info:
  version: "3.0.0"
  title: "GitHub API"
paths:
  /search/repositories:
    get:
      description: "Find repositories via various criteria. This method returns up\
        \ to 100 results [per page]().\n\n**Parameters**\n\n'The `q` search term can\
        \ also contain any combination of the supported repository search qualifiers\
        \ as described by the in-browser repository search documentation and search\
        \ syntax documentation:'\n- `in` Qualifies which fields are searched. With\
        \ this qualifier you can restrict the search to just the repository name,\
        \ description, readme, or any combination of these.\n- `size` Finds repositories\
        \ that match a certain size (in kilobytes).\n- `forks` Filters repositories\
        \ based on the number of forks.\n- `fork` Filters whether forked repositories\
        \ should be included (true) or only forked repositories should be returned\
        \ (only).\n- `created` or `pushed` Filters repositories based on date of creation,\
        \ or when they were last updated.\n- `user` or `repo` Limits searches to a\
        \ specific user or repository.\n- `language` Searches repositories based on\
        \ the language they're written in.\n- `stars` Searches repositories based\
        \ on the number of stars.\n\n**Example**\n\nSuppose you want to search for\
        \ popular Tetris repositories written in Assembly. Your query might look like\
        \ this.\n\n```\nhttps://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc\n\
        ```\n\nIn this request, we're searching for repositories with the word `tetris`\
        \ in the name, the description, or the README. We're limiting the results\
        \ to only find repositories where the primary language is Assembly. We're\
        \ sorting by stars in descending order, so that the most popular repositories\
        \ appear first in the search results.\n\n```\nStatus: 200 OK\nLink: <https://api.github.com/resource?page=2>;\
        \ rel=\"next\",\n      <https://api.github.com/resource?page=5>; rel=\"last\"\
        \nX-RateLimit-Limit: 20\nX-RateLimit-Remaining: 19\n{\n  \"total_count\":\
        \ 40,\n  \"incomplete_results\": false,\n  \"items\": [\n    {\n      \"id\"\
        : 3081286,\n      \"name\": \"Tetris\",\n      \"full_name\": \"dtrupenn/Tetris\"\
        ,\n      \"owner\": {\n        \"login\": \"dtrupenn\",\n        \"id\": 872147,\n\
        \        \"avatar_url\": \"https://secure.gravatar.com/avatar/e7956084e75f239de85d3a31bc172ace?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png\"\
        ,\n        \"gravatar_id\": \"\",\n        \"url\": \"https://api.github.com/users/dtrupenn\"\
        ,\n        \"received_events_url\": \"https://api.github.com/users/dtrupenn/received_events\"\
        ,\n        \"type\": \"User\"\n      },\n      \"private\": false,\n     \
        \ \"html_url\": \"https://github.com/dtrupenn/Tetris\",\n      \"description\"\
        : \"A C implementation of Tetris using Pennsim through LC4\",\n      \"fork\"\
        : false,\n      \"url\": \"https://api.github.com/repos/dtrupenn/Tetris\"\
        ,\n      \"created_at\": \"2012-01-01T00:31:50Z\",\n      \"updated_at\":\
        \ \"2013-01-05T17:58:47Z\",\n      \"pushed_at\": \"2012-01-01T00:37:02Z\"\
        ,\n      \"homepage\": \"\",\n      \"size\": 524,\n      \"stargazers_count\"\
        : 1,\n      \"watchers_count\": 1,\n      \"language\": \"Assembly\",\n  \
        \    \"forks_count\": 0,\n      \"open_issues_count\": 0,\n      \"master_branch\"\
        : \"master\",\n      \"default_branch\": \"master\",\n      \"score\": 10.309712\n\
        \    }\n  ]\n}\n```\n\n**Highlighting Repository Search Results**\n\nSome\
        \ API consumers will want to highlight the matching search terms when displaying\
        \ search results. The API offers additional metadata to support this use case.\
        \ To get this metadata in your search results, specify the `text-match` media\
        \ type in your Accept header. For example, via curl, the above query would\
        \ look like this:\n\n```\ncurl -H 'Accept: application/vnd.github.v3.text-match+json'\
        \ \\\n  'https://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc'\n\
        ```\n\nThis produces the same JSON payload as above, with an extra key called\
        \ text_matches, an array of objects. These objects provide information such\
        \ as the position of your search terms within the text, as well as the property\
        \ that included the search term.\n\nWhen searching for repositories, you can\
        \ get text match metadata for the name and description fields. (See the section\
        \ on text match metadata for full details.)\n\nHere's an example response:\n\
        \n```\n{\n  \"text_matches\": [\n    {\n      \"object_url\": \"https://api.github.com/repositories/3081286\"\
        ,\n      \"object_type\": \"Repository\",\n      \"property\": \"name\",\n\
        \      \"fragment\": \"Tetris\",\n      \"matches\": [\n        {\n      \
        \    \"text\": \"Tetris\",\n          \"indices\": [\n            0,\n   \
        \         6\n          ]\n        }\n      ]\n    },\n    {\n      \"object_url\"\
        : \"https://api.github.com/repositories/3081286\",\n      \"object_type\"\
        : \"Repository\",\n      \"property\": \"description\",\n      \"fragment\"\
        : \"A C implementation of Tetris using Pennsim through LC4\",\n      \"matches\"\
        : [\n        {\n          \"text\": \"Tetris\",\n          \"indices\": [\n\
        \            22,\n            28\n          ]\n        }\n      ]\n    }\n\
        \  ]\n}\n```\n"
      operationId: "searchRepositoriesGET"
      parameters:
      - name: "q"
        in: "query"
        description: "The search keywords, as well as any qualifiers."
        required: true
        type: "string"
      - name: "sort"
        in: "query"
        description: "The sort field. One of `stars`, `forks`, or `updated`. Default:\
          \ results are sorted by best match."
        required: false
        type: "string"
      - name: "order"
        in: "query"
        description: "The sort order if sort parameter is provided. One of `asc` or\
          \ `desc`. Default: `desc`"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/Repositories"
      x-swagger-router-controller: "Default"
definitions:
  Repositories:
    type: "object"
    properties:
      total_count:
        type: "integer"
      incomplete_results:
        type: "boolean"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Repositories_items"
  Repositories_owner:
    properties:
      login:
        type: "string"
      id:
        type: "integer"
      avatar_url:
        type: "string"
      gravatar_id:
        type: "string"
      url:
        type: "string"
      received_events_url:
        type: "string"
      type:
        type: "string"
  Repositories_items:
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      owner:
        $ref: "#/definitions/Repositories_owner"
      private:
        type: "boolean"
      html_url:
        type: "string"
      description:
        type: "string"
      fork:
        type: "boolean"
      url:
        type: "string"
      created_at:
        type: "string"
      updated_at:
        type: "string"
      pushed_at:
        type: "string"
      homepage:
        type: "string"
      size:
        type: "integer"
      stargazers_count:
        type: "integer"
      watchers_count:
        type: "integer"
      language:
        type: "string"
      forks_count:
        type: "integer"
      open_issues_count:
        type: "integer"
      master_branch:
        type: "string"
      default_branch:
        type: "string"
      score:
        type: "number"
